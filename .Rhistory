library(readr)
tour_solution_68913 <- read_csv("Documents/Personal/Kaggle Competitions/Santa's Workshop Tour 2019/attempt_07/outputs/tour_solution_68913.csv")
View(tour_solution_68913)
library(readr)
family_data <- read_csv("Documents/Personal/Kaggle Competitions/Santa's Workshop Tour 2019/attempt_07/inputs/family_data.csv")
View(family_data)
library(dplyr)
View(family_data %>% select(-n_people) %>% gather())
library(tidyverse)
View(family_data %>% select(-n_people) %>% gather())
?gather
View(family_data %>% select(-n_people) %>% gather(-family_id))
View(family_data %>% select(-n_people) %>% gather(key = "choice", value = "day", -family_id))
family_choices <- family_data %>% select(-n_people) %>% gather(key = "choice", value = "day", -family_id)
View(tour_solution_68913 %>% left_join(family_choices, c("family_id", "assigned_day" = "day")))
library(RPostgres)
library(tidyverse)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
dbSendQuery(conn, "GRANT basic_access TO ryananderson")
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
View(dbGetQuery(conn, "SELECT * FROM information_schema.tables "))
View(dbGetQuery(conn, "SELECT * FROM information_schema.columns"))
View(dbGetQuery(conn, "SELECT * FROM information_schema.tables where table_schema in ('nwsl', 'mls')"))
View(dbGetQuery(conn, "SELECT * FROM information_schema.columns where table_schema in ('nwsl', 'mls')"))
schema_columns <- dbGetQuery(conn, "SELECT table_schema, table_name, column_name, is_nullable, data_type FROM information_schema.columns WHERE table_schema IN ('nwsl', 'mls') ORDER BY table_schema, table_name, ordinal_position")
View(schema_columns)
schema_columns <- dbGetQuery(conn, "SELECT table_schema, table_name, column_name, data_type FROM information_schema.columns WHERE table_schema IN ('nwsl', 'mls') ORDER BY table_schema, table_name, ordinal_position")
write.csv(schema_columns, "~/Downloads/schema_columns.csv", row.names = FALSE)
install.packages(c("devtools", "DT", "earth", "googleAuthR", "RForcecom", "RGA", "shiny", "shinyBS", "shinyjs"))
library(googleAuthR)
library(shiny)
library(shinyjs)
library(httr)
library(DT)
library(dplyr)
library(RGA)
library(rvest)
library(lubridate)
library(RForcecom)
library(earth)
library(scales)
library(shinyBS)
library(googleAuthR)
library(devtools)
library(googleID)
## Set token for Asana API. To create a token, log in to Asana, go to My Profile Settings > Apps > Manage Developer Apps, and create a new personal access token.
authorization <- "Bearer 0/bf2699a773f1de11927bdf7f0bd41898"
## Custom function that pulls content from Asana and puts it into a data frame.
getContent <- function(parsed.content){
table <- data.frame()
for(i in 1:length(parsed.content)) {
table_tmp <- data.frame(name = parsed.content[[i]]$name, id = parsed.content[[i]]$id)
table <- rbind(table, table_tmp)
}
table$name <- as.character(table$name)
table$id <- as.character(table$id)
table
}
## Pulls all current users from Asana.
users_api <- content(GET("https://app.asana.com/api/1.0/teams/290211371791149/users", add_headers(Authorization = authorization)), as = "parsed")$data
users <- getContent(users_api)
## Custom function that pulls content from Asana and puts it into a data frame.
getContent <- function(parsed.content){
table <- data.frame()
for(i in 1:length(parsed.content)) {
table_tmp <- data.frame(name = parsed.content[[i]]$name, id = parsed.content[[i]]$gid)
table <- rbind(table, table_tmp)
}
table$name <- as.character(table$name)
table$id <- as.character(table$id)
table
}
## Pulls all current users from Asana.
users_api <- content(GET("https://app.asana.com/api/1.0/teams/290211371791149/users", add_headers(Authorization = authorization)), as = "parsed")$data
users <- getContent(users_api)
devtools::install_github("MarkEdmondson1234/googleID")
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
## Pulls all current initiatives from Asana.
initiatives_api <- content(GET("https://app.asana.com/api/1.0/teams/290211371791149/projects", add_headers(Authorization = authorization)), as = "parsed")$data
## Custom function that pulls content from Asana and puts it into a data frame.
getContent <- function(parsed.content){
table <- data.frame()
for(i in 1:length(parsed.content)) {
table_tmp <- data.frame(name = parsed.content[[i]]$name, id = parsed.content[[i]]$gid)
table <- rbind(table, table_tmp)
}
table$name <- as.character(table$name)
table$id <- as.character(table$id)
table
}
## Pulls all current users from Asana.
users_api <- content(GET("https://app.asana.com/api/1.0/teams/290211371791149/users", add_headers(Authorization = authorization)), as = "parsed")$data
users <- getContent(users_api)
## Pulls all current initiatives from Asana.
initiatives_api <- content(GET("https://app.asana.com/api/1.0/teams/290211371791149/projects", add_headers(Authorization = authorization)), as = "parsed")$data
initiatives <- getContent(initiatives_api)
initiatives <- initiatives[-grep("Holidays & PTO", initiatives$name),]
initiatives <- initiatives[-grep("Project Templates", initiatives$name),]
## Pulls all current projects from Asana.
projects_api <- content(GET("https://app.asana.com/api/1.0/tags/392401558637273/tasks?completed_since=now", add_headers(Authorization = authorization)), as = "parsed")$data
projects <- getContent(projects_api)
projects <- projects[-grep("Report Template", projects$name),]
projects$Assignee <- NA; projects$Initiative <- NA; projects$InitiativeID <- NA; projects$Release <- NA; projects$Project <- NA
for(i in 1:nrow(projects)) {
url_tmp <- paste0("https://app.asana.com/api/1.0/tasks/", projects$id[i])
tasks_api_tmp <- content(GET(url_tmp, add_headers(Authorization = authorization)), as = "parsed")$data
projects$Assignee[i] <- ifelse(!is.null(as.character(tasks_api_tmp$assignee$name)),
as.character(tasks_api_tmp$assignee$name), "")
projects$Initiative[i] <- ifelse(length(tasks_api_tmp$memberships) > 1, {
project_df_tmp <- data.frame(init_name = c(as.character(tasks_api_tmp$memberships[[1]]$project$name), as.character(tasks_api_tmp$memberships[[2]]$project$name)), init_id = c(as.character(tasks_api_tmp$memberships[[1]]$project$id), as.character(tasks_api_tmp$memberships[[2]]$project$id)))
project_df_tmp <- project_df_tmp[-grep("^Comm", project_df_tmp$init_name),]
as.character(project_df_tmp$init_name[1])
}, as.character(tasks_api_tmp$memberships[[1]]$project$name))
projects$InitiativeID[i] <- ifelse(length(tasks_api_tmp$memberships) > 1, {
project_df_tmp <- data.frame(init_name = c(as.character(tasks_api_tmp$memberships[[1]]$project$name), as.character(tasks_api_tmp$memberships[[2]]$project$name)), init_id = c(as.character(tasks_api_tmp$memberships[[1]]$project$id), as.character(tasks_api_tmp$memberships[[2]]$project$id)))
project_df_tmp <- project_df_tmp[-grep("^Comm", project_df_tmp$init_name),]
as.character(project_df_tmp$init_id[1])
}, as.character(tasks_api_tmp$memberships[[1]]$project$id))
projects$Release[i] <- ifelse(!is.null(as.character(tasks_api_tmp$due_on)), as.character(tasks_api_tmp$due_on), "")
}
url_tmp <- paste0("https://app.asana.com/api/1.0/tasks/", projects$id[i])
tasks_api_tmp <- content(GET(url_tmp, add_headers(Authorization = authorization)), as = "parsed")$data
projects$Assignee[i] <- ifelse(!is.null(as.character(tasks_api_tmp$assignee$name)),
as.character(tasks_api_tmp$assignee$name), "")
projects$Initiative[i] <- ifelse(length(tasks_api_tmp$memberships) > 1, {
project_df_tmp <- data.frame(init_name = c(as.character(tasks_api_tmp$memberships[[1]]$project$name), as.character(tasks_api_tmp$memberships[[2]]$project$name)), init_id = c(as.character(tasks_api_tmp$memberships[[1]]$project$id), as.character(tasks_api_tmp$memberships[[2]]$project$id)))
project_df_tmp <- project_df_tmp[-grep("^Comm", project_df_tmp$init_name),]
as.character(project_df_tmp$init_name[1])
}, as.character(tasks_api_tmp$memberships[[1]]$project$name))
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
## Set options for Google Analytics API. These are tied to the communications@newamerica.org Google account.
authorize(client.id = "1098443712300-gg6p8rn4nlrcvbqan9j5ai4ts6a56nf1.apps.googleusercontent.com", client.secret = "9LFf7uZKTjx4RoXs59k3uV1i", cache = "token")
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
runApp('Downloads/b4cbcbdcb7734aee8374293d8ba22d68')
library(RPostgres)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
library(RPostgres)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
players <- dbGetQuery(conn, "SELECT * FROM mls.players")
View(players)
setwd("~/Documents/Personal/American Soccer Analysis/Shiny Application/Redesign")
setwd("~/Documents/Personal/American Soccer Analysis/Shiny Application/Redesign/asa-mls-shiny")
shiny::runApp()
install.packages(c("bs4Dash", "eeptools", "shinyWidgets"))
runApp()
View(all_players_seasons)
runApp()
runApp()
packageVersion("bs4Dash")
packageVersion("shinyjs")
devtools::install_version("bs4Dash", "0.4.0")
packageVersion("bs4Dash")
runApp()
packageVersion("shinyWidgets")
devtools::install_version("shinyWidgets", "0.4.8")
devtools::install_version("shinyjs", "1.0")
runApp()
packageVersion("shiny")
devtools::install_version("shiny", "1.2.0")
runApp()
packageVersion("eeptools")
sidebar <- bs4DashSidebar(
skin = "dark",
status = "primary",
title = "American Soccer Analysis",
brandColor = "primary",
src = "asa_icon_white.png",
elevation = 0,
opacity = 1,
bs4SidebarMenu(
id = "asa_sidebar",
bs4SidebarHeader("Profiles"),
bs4SidebarMenuItem(
"Players",
tabName = "profile_player",
icon = "user"
),
bs4SidebarMenuItem(
"Teams",
tabName = "profile_teams",
icon = "shield-alt"
),
bs4SidebarHeader("Header 1"),
bs4SidebarMenuItem(
"Item 1",
tabName = "item1",
icon = "sliders"
)
)
)
packageVersion("shiny")
shiny::runApp()
packageVersion("shiny")
