stop()
}
conn <- DBI::dbConnect(Redashr::Redash(),
base_url = "https://research.analyticsprod.eab.com/",
api_key = api_key,
data_source_name = "Platform Analytics Prod")
bo <- 1
while(bo != 10) {
x <- try(DBI::dbGetQuery(conn, paste0(
"SELECT m.id AS institution_id,
schema_name,
name AS institution_name
FROM public.gd_manager_member m
JOIN public.gd_manager_memberfeaturesetting fs ON m.id = fs.member_id
WHERE feature_setting_id = 'aps_benchmarking_enabled'
AND value
ORDER BY schema_name")),
silent = TRUE)
if(all(class(x) == "try-error")) {
Sys.sleep(1)
bo <- bo + 1
}
else break
}
x
}
rm(members)
nrow(member_institutions)
i = 3
paste0("Default Mappings/", gsub("\\s+", "", member_institutions$institution_name[i]), ".csv")
for(i in 1:3){
## Step One: Map department names to standard department names.
standard_department_matches__step_one <- department_names_transformed__AY_2018 %>%
filter(institution_id == member_institutions$institution_id[i]) %>%
stringdist_left_join(cip_mapping %>%
distinct(eab_standard_department_name) %>%
mutate(eab_standard_department_name_new = gsub("^[0-9]+\\.?[0-9]+\\)?\\s*", "",
gsub("\\.$", "",
gsub("(-|/)", " ",
gsub("(,|\\.|\\(|\\))", "",
gsub(" &", "",
str_trim(str_squish(removeWords(toupper(eab_standard_department_name),
toupper(c(stopwords("english"), "other"))))))))))),
by = c("eab_department_name_new" = "eab_standard_department_name_new"),
method = "cosine",
q = 4,
distance_col = "distance") %>%
group_by(institution_id, eab_department_name) %>%
top_n(-1, distance) %>%
ungroup() %>%
filter(distance < 1)
## Step Two: Map department names to six-digit CIP codes.
standard_department_matches__step_two <- department_names_transformed__AY_2018 %>%
filter(institution_id == member_institutions$institution_id[i]) %>%
stringdist_left_join(cip_mapping,
by = c("eab_department_name_new" = "six_digit_cip"),
method = "cosine",
q = 4,
distance_col = "distance") %>%
group_by(institution_id, eab_department_name) %>%
top_n(-1, distance) %>%
ungroup() %>%
filter(distance < 1)
standard_department_matches <- standard_department_matches__step_one %>%
select(institution_id,
eab_department_name,
eab_standard_department_name_1 = eab_standard_department_name,
distance_1 = distance) %>%
full_join(standard_department_matches__step_two %>%
select(institution_id,
eab_department_name,
eab_standard_department_name_2 = eab_standard_department_name,
distance_2 = distance)) %>%
mutate(eab_standard_department_name = ifelse(distance_1 <= 1/3, eab_standard_department_name_1,
ifelse(distance_2 <= 1/3, eab_standard_department_name_2,
ifelse(eab_standard_department_name_1 == eab_standard_department_name_2, eab_standard_department_name_1, NA))),
eab_standard_department_name = gsub("Rotc", "ROTC", toTitleCase(tolower(eab_standard_department_name)))) %>%
arrange(institution_id, eab_standard_department_name) %>%
group_by(institution_id, eab_department_name) %>%
summarize(eab_standard_department_name = first(eab_standard_department_name)) %>%
ungroup() %>%
filter(!is.na(eab_standard_department_name))
## Step Three: Map course names to six-digit CIP codes.
standard_department_matches__step_three <- department_course_names_transformed__AY_2018 %>%
anti_join(standard_department_matches, c("institution_id", "eab_department_name")) %>%
filter(institution_id == member_institutions$institution_id[i]) %>%
stringdist_left_join(cip_mapping,
by = c("course_name_new" = "six_digit_cip"),
method = "cosine",
q = 4,
distance_col = "distance") %>%
filter(distance < 1) %>%
group_by(institution_id, course_name, eab_standard_department_name) %>%
top_n(-1, distance) %>%
ungroup() %>%
group_by(institution_id, eab_department_name, eab_department_name_new, eab_standard_department_name) %>%
summarize(distance = weighted.mean(distance, attempted_credits)) %>%
top_n(-1, distance) %>%
ungroup()
standard_department_matches <- rbind(standard_department_matches,
standard_department_matches__step_three %>%
select(institution_id,
eab_department_name,
eab_standard_department_name_3 = eab_standard_department_name,
distance_3 = distance) %>%
mutate(eab_standard_department_name = ifelse(distance_3 <= 2/3, eab_standard_department_name_3, NA),
eab_standard_department_name = gsub("Rotc", "ROTC", toTitleCase(tolower(eab_standard_department_name)))) %>%
arrange(institution_id, eab_standard_department_name) %>%
group_by(institution_id, eab_department_name) %>%
summarize(eab_standard_department_name = first(eab_standard_department_name)) %>%
ungroup() %>%
replace_na(list(eab_standard_department_name = "Not Benchmarked")))
write.csv(standard_department_matches, paste0("Default Mappings/", gsub("\\s+", "", member_institutions$institution_name[i]), ".csv"), row.names = FALSE)
}
library(plyr)
library(tidyverse)
library(rvest)
library(httr)
library(RSelenium)
library(jsonlite)
library(naniar)
system("docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0")
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox"
)
remDr$open()
remDr$navigate("https://www.whoscored.com/Regions/233/Tournaments/85/USA-Major-League-Soccer")
whoscored_MLS_summary <- remDr$findElement(using = "css", value = "div#sub-navigation ul li:first-child a")
whoscored_MLS_summary_href <- whoscored_MLS_summary$getElementAttribute("href")[[1]]
remDr$navigate(whoscored_MLS_summary_href)
whoscored_MLS_gamesList_01 <- remDr$findElements(using = "css", value = "table#tournament-fixture td.toolbar.right a.match-report")
whoscored_MLS_gamesList_href_01 <- unlist(lapply(whoscored_MLS_gamesList_01, function(x) {x$getElementAttribute("href")}))
whoscored_MLS_gamesList_ids_01 <- gsub("(^.*Matches/|/MatchReport.*$)", "", whoscored_MLS_gamesList_href_01)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "div#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "xpath", value = "//*[@id='date-controller']/a[1]")
whoscored_gamesList_previous$clickElement()
remDr$navigate("https://www.whoscored.com/Regions/233/Tournaments/85/Seasons/7609/Stages/17011/Fixtures/USA-Major-League-Soccer-2019")
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "div#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$click()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElements()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
system("docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0")
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox"
)
remDr$open()
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
remDr$executeScript("arguments[0].style.height='auto'; arguments[0].style.visibility='visible';", whoscored_gamesList_previous)
remDr$executeScript("arguments[0].style.height='auto'; arguments[0].style.visibility='visible';", args = list(whoscored_gamesList_previous))
whoscored_gamesList_previous$clickElement()
remDr$executeScript("document.querySelector('#date-controller a.previous').hidden = false;")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$getElementAttribute("style")
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$getElementAttribute("style")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous span")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
remDr$getCurrentUrl
remDr$getCurrentUrl()
?navigate
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")[[1]]
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$errorDetails
whoscored_gamesList_previous$errorDetails()
?remoteDriver
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$getElementAttribute("style")
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
?rsDriver
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox"
)
?rsDriver
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browser = "firefox"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4450L,
browserName = "firefox"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4450L,
browser = "firefox"
)
remDr <- rsDriver()
remDr <- rsDriver(browser = "firefox")
salaries_all <- readRDS("~/Downloads/SalaryData.rds")
View(salaries_all)
library(plyr)
library(tidyverse)
salaries_2018_02 <- salaries_all %>% filter(Date == "2018-09-15")
View(salaries_2018_02)
salaries_2019_01 <- salaries_all %>% filter(Date == "2019-06-01")
write.csv(salaries_2018_02, "~/Downloads/salaries_2018_02.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(salaries_2019_01, "~/Downloads/salaries_2019_01.csv", row.names = FALSE, fileEncoding = "UTF-8")
View(salaries_2019_01)
devtools::install_github("johndharrison/seleniumPipes")
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
library(plyr)
library(tidyverse)
library(rvest)
library(httr)
library(RSelenium)
library(jsonlite)
library(bazar)
library(naniar)
library(RPostgres)
library(gmailr)
library(htmlTable)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "select * from information_schema.columns where table_schema = 'mls' and table_name = 'events'"))
column_name <- "miss_left"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "miss_right"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "out_of_box_centre"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "miss_high"
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "penalty"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "regular_play"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "right_foot"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "high_right"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "throwin_set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "angle"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real"))
column_name <- "angle"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
View(dbGetQuery(conn, "select angle from mls.events where angle is not null"))
View(dbGetQuery(conn, "select angle from mls.events where angle is not null"))
View(dbGetQuery(conn, "select angle from mls.events where angle is not null"))
View(dbGetQuery(conn, "select angle from mls.events where angle = '1,925696'"))
dbSendQuery(conn, "update mls.events set angle = NULL where angle = '1,925696'")
column_name <- "angle"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
as.numeric("1,925696")
View(dbGetQuery(conn, "select * from information_schema.columns where table_schema = 'mls' and table_name = 'events'"))
column_name <- "length"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
dbSendQuery(conn, "update mls.events set length = NULL where length = '1,812982'")
column_name <- "length"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
column_name <- "pass_end_x"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
View(dbGetQuery(conn, "select pass_end_x from mls.events where pass_end_x is not null"))
View(dbGetQuery(conn, "select pass_end_x from mls.events where pass_end_x is not null"))
View(dbGetQuery(conn, "select pass_end_y from mls.events where pass_end_y is not null"))
dbSendQuery(conn, "update mls.events set pass_end_x = NULL where pass_end_x = 'TRUE'")
dbSendQuery(conn, "update mls.events set pass_end_y = NULL where pass_end_y = 'TRUE'")
column_name <- "pass_end_x"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
column_name <- "pass_end_y"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
?mutate_at
View(dbGetQuery(conn, "select * from information_schema.columns where table_schema = 'mls' and table_name = 'events'"))
asa_logicalHeaders <- dbGetQuery(conn, "SELECT column_name FROM information_schema.columns WHERE table_schema = 'mls' AND table_name = 'events' AND data_type = 'boolean'")$column_name
asa_numericHeaders <- dbGetQuery(conn, "SELECT column_name FROM information_schema.columns WHERE table_schema = 'mls' AND table_name = 'events' AND data_type IN ('integer', 'numeric', 'real')")$column_name
as.numeric("TRUE")
data.frame(test = rep("TRUE", 15), stringsAsFactors = FALSE) %>% mutate_at("test", as.numeric)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
most_recent_game <- dbGetQuery(conn, "select game_id from mls.games order by date_time_et desc limit 1")
View(most_recent_game)
most_recent_game <- dbGetQuery(conn, "select * from mls.games order by date_time_et desc limit 1")
View(most_recent_game)
most_recent_gameID <- most_recent_game$game_id
events_new <- dbGetQuery(conn, "select * from mls.events where game_id = 1351796")
?gc
shots_new <- events_new %>%
filter(type_id %in% 13:16)
View(shots_new)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
field_length = 115; field_width = 80
shots_new <- events_new %>%
filter(type_id %in% 13:16) %>%
mutate(shot_x = (100 - x) * field_length / 100,
shot_y = (y - 50) * field_width / 100)
View(shots_new)
View(shots_new %>% select(x, y, shot_x, shot_y))
shots_new <- events_new %>%
filter(type_id %in% 13:16) %>%
mutate(shot_x = (100 - x) * field_length / 100,
shot_y = (y - 50) * field_width / 100,
shot_distance = sqrt(shot_x^2 + shot_y^2),
shot_angle = atan(shot_y / shot_x) * 180 / pi,
slope1 = -abs(shot_y) / shot_x,
slope2 = shot_x / (abs(shot_y) + 4),
xpoint = -4 * (slope1 + slope2) / (slope2 - slope1),
ypoint = flength - slope2 * (xpoint + 4),
shot_available = sqrt((4 - xpoint)^2 + (flength - ypoint)^2))
shots_new <- events_new %>%
filter(type_id %in% 13:16) %>%
mutate(shot_x = (100 - x) * field_length / 100,
shot_y = (y - 50) * field_width / 100,
shot_distance = sqrt(shot_x^2 + shot_y^2),
shot_angle = atan(shot_y / shot_x) * 180 / pi,
slope1 = -abs(shot_y) / shot_x,
slope2 = shot_x / (abs(shot_y) + 4),
xpoint = -4 * (slope1 + slope2) / (slope2 - slope1),
ypoint = field_length - slope2 * (xpoint + 4),
shot_available = sqrt((4 - xpoint)^2 + (field_length - ypoint)^2))
View(shots_new %>% select(x, y, shot_x, shot_y, shot_distance, shot_angle, shot_available))
load("~/Downloads/UpdatedModels_2018-02-03.Rdata")
file.edit("~/.Rprofile")
file.edit("~/.Rprofile")
setwd("~/Documents/American Soccer Analysis/Shiny Application/Redesign/asa-mls-shiny")
shiny::runApp()
?bs4DashNavbar
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bs4DashSidebar
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?div
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
