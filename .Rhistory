system("docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0")
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox"
)
remDr$open()
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
remDr$executeScript("arguments[0].style.height='auto'; arguments[0].style.visibility='visible';", whoscored_gamesList_previous)
remDr$executeScript("arguments[0].style.height='auto'; arguments[0].style.visibility='visible';", args = list(whoscored_gamesList_previous))
whoscored_gamesList_previous$clickElement()
remDr$executeScript("document.querySelector('#date-controller a.previous').hidden = false;")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$getElementAttribute("style")
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$getElementAttribute("style")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous span")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
remDr$getCurrentUrl
remDr$getCurrentUrl()
?navigate
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")[[1]]
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElements(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$errorDetails
whoscored_gamesList_previous$errorDetails()
?remoteDriver
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller > a.previous.button.ui-state-default.rc-l.is-default")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
whoscored_gamesList_previous$getElementAttribute("style")
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr$open()
remDr$navigate(whoscored_MLS_summary_href)
whoscored_gamesList_previous <- remDr$findElement(using = "css", value = "#date-controller a.previous")
whoscored_gamesList_previous$clickElement()
?rsDriver
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox",
version = "2.53.0"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox"
)
?rsDriver
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browser = "firefox"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4450L,
browserName = "firefox"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4450L,
browser = "firefox"
)
remDr <- rsDriver()
remDr <- rsDriver(browser = "firefox")
salaries_all <- readRDS("~/Downloads/SalaryData.rds")
View(salaries_all)
library(plyr)
library(tidyverse)
salaries_2018_02 <- salaries_all %>% filter(Date == "2018-09-15")
View(salaries_2018_02)
salaries_2019_01 <- salaries_all %>% filter(Date == "2019-06-01")
write.csv(salaries_2018_02, "~/Downloads/salaries_2018_02.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(salaries_2019_01, "~/Downloads/salaries_2019_01.csv", row.names = FALSE, fileEncoding = "UTF-8")
View(salaries_2019_01)
devtools::install_github("johndharrison/seleniumPipes")
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
library(plyr)
library(tidyverse)
library(rvest)
library(httr)
library(RSelenium)
library(jsonlite)
library(bazar)
library(naniar)
library(RPostgres)
library(gmailr)
library(htmlTable)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "select * from information_schema.columns where table_schema = 'mls' and table_name = 'events'"))
column_name <- "miss_left"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "miss_right"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "out_of_box_centre"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "miss_high"
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "penalty"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "regular_play"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "right_foot"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
column_name <- "set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "high_right"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "throwin_set_piece"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type boolean USING ", column_name, "::boolean"))
dbSendQuery(conn, paste0("update mls.events set ", column_name, " = NULL where not ", column_name))
column_name <- "angle"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real"))
column_name <- "angle"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
View(dbGetQuery(conn, "select angle from mls.events where angle is not null"))
View(dbGetQuery(conn, "select angle from mls.events where angle is not null"))
View(dbGetQuery(conn, "select angle from mls.events where angle is not null"))
View(dbGetQuery(conn, "select angle from mls.events where angle = '1,925696'"))
dbSendQuery(conn, "update mls.events set angle = NULL where angle = '1,925696'")
column_name <- "angle"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
as.numeric("1,925696")
View(dbGetQuery(conn, "select * from information_schema.columns where table_schema = 'mls' and table_name = 'events'"))
column_name <- "length"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
dbSendQuery(conn, "update mls.events set length = NULL where length = '1,812982'")
column_name <- "length"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
column_name <- "pass_end_x"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
View(dbGetQuery(conn, "select pass_end_x from mls.events where pass_end_x is not null"))
View(dbGetQuery(conn, "select pass_end_x from mls.events where pass_end_x is not null"))
View(dbGetQuery(conn, "select pass_end_y from mls.events where pass_end_y is not null"))
dbSendQuery(conn, "update mls.events set pass_end_x = NULL where pass_end_x = 'TRUE'")
dbSendQuery(conn, "update mls.events set pass_end_y = NULL where pass_end_y = 'TRUE'")
column_name <- "pass_end_x"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
column_name <- "pass_end_y"
dbSendQuery(conn, paste0("alter table mls.events alter column ", column_name, " type real USING ", column_name, "::real"))
?mutate_at
View(dbGetQuery(conn, "select * from information_schema.columns where table_schema = 'mls' and table_name = 'events'"))
asa_logicalHeaders <- dbGetQuery(conn, "SELECT column_name FROM information_schema.columns WHERE table_schema = 'mls' AND table_name = 'events' AND data_type = 'boolean'")$column_name
asa_numericHeaders <- dbGetQuery(conn, "SELECT column_name FROM information_schema.columns WHERE table_schema = 'mls' AND table_name = 'events' AND data_type IN ('integer', 'numeric', 'real')")$column_name
as.numeric("TRUE")
data.frame(test = rep("TRUE", 15), stringsAsFactors = FALSE) %>% mutate_at("test", as.numeric)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
most_recent_game <- dbGetQuery(conn, "select game_id from mls.games order by date_time_et desc limit 1")
View(most_recent_game)
most_recent_game <- dbGetQuery(conn, "select * from mls.games order by date_time_et desc limit 1")
View(most_recent_game)
most_recent_gameID <- most_recent_game$game_id
events_new <- dbGetQuery(conn, "select * from mls.events where game_id = 1351796")
?gc
shots_new <- events_new %>%
filter(type_id %in% 13:16)
View(shots_new)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
field_length = 115; field_width = 80
shots_new <- events_new %>%
filter(type_id %in% 13:16) %>%
mutate(shot_x = (100 - x) * field_length / 100,
shot_y = (y - 50) * field_width / 100)
View(shots_new)
View(shots_new %>% select(x, y, shot_x, shot_y))
shots_new <- events_new %>%
filter(type_id %in% 13:16) %>%
mutate(shot_x = (100 - x) * field_length / 100,
shot_y = (y - 50) * field_width / 100,
shot_distance = sqrt(shot_x^2 + shot_y^2),
shot_angle = atan(shot_y / shot_x) * 180 / pi,
slope1 = -abs(shot_y) / shot_x,
slope2 = shot_x / (abs(shot_y) + 4),
xpoint = -4 * (slope1 + slope2) / (slope2 - slope1),
ypoint = flength - slope2 * (xpoint + 4),
shot_available = sqrt((4 - xpoint)^2 + (flength - ypoint)^2))
shots_new <- events_new %>%
filter(type_id %in% 13:16) %>%
mutate(shot_x = (100 - x) * field_length / 100,
shot_y = (y - 50) * field_width / 100,
shot_distance = sqrt(shot_x^2 + shot_y^2),
shot_angle = atan(shot_y / shot_x) * 180 / pi,
slope1 = -abs(shot_y) / shot_x,
slope2 = shot_x / (abs(shot_y) + 4),
xpoint = -4 * (slope1 + slope2) / (slope2 - slope1),
ypoint = field_length - slope2 * (xpoint + 4),
shot_available = sqrt((4 - xpoint)^2 + (field_length - ypoint)^2))
View(shots_new %>% select(x, y, shot_x, shot_y, shot_distance, shot_angle, shot_available))
load("~/Downloads/UpdatedModels_2018-02-03.Rdata")
file.edit("~/.Rprofile")
file.edit("~/.Rprofile")
setwd("~/Documents/American Soccer Analysis/Shiny Application/Redesign/asa-mls-shiny")
shiny::runApp()
runApp()
?observeEvent
runApp()
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "select * from mls.players where player_id = 382265"))
library(RSelenium)
system("docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0")
system("docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0")
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "firefox"
)
remDr$open()
remDr$navigate("https://spire.com/en/spire/careers/1766415?gh_jid=1766415")
remDr$screenshot(display = TRUE)
runApp()
sample(1:300, 1)
sample(1:300, 1)
sample(1:300, 1)
sample(1:300, 1)
sample(1:300, 1)
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
dbSendQuery(conn, "GRANT basic_access TO mattyanselmo")
dbSendQuery(conn, "GRANT basic_access TO mattyanselmo")
conn <- dbConnect(Postgres(),
user = "doadmin",
password = "cvjiepdtnd8u90q3",
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
dbSendQuery(conn, "GRANT basic_access TO mattyanselmo")
dbSendQuery(conn, "GRANT basic_access TO rvino")
dbSendQuery(conn, "GRANT basic_access TO tylerrichardett with admin option")
dbSendQuery(conn, "GRANT admin TO tylerrichardett with admin option")
dbSendQuery(conn, "revoke basic_access from rvino")
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
dbSendQuery(conn, "GRANT basic_access TO rvino")
dbSendQuery(conn, 'create table test')
dbSendQuery(conn, 'CREATE TABLE table_name (
column_name TYPE column_constraint,
table_constraint table_constraint
)')
dbSendQuery(conn, 'CREATE TABLE table_name (
column_name TEXT,
table_constraint INTEGER
)')
dbSendQuery(conn, 'drop table table_name')
View(dbGetQuery(conn, "SELECT u.usename AS "Role name",
CASE WHEN u.usesuper AND u.usecreatedb THEN CAST('superuser, create
database' AS pg_catalog.text)
WHEN u.usesuper THEN CAST('superuser' AS pg_catalog.text)
WHEN u.usecreatedb THEN CAST('create database' AS
pg_catalog.text)
ELSE CAST('' AS pg_catalog.text)
END AS "Attributes"
FROM pg_catalog.pg_user u
ORDER BY 1;"))
View(dbGetQuery(conn, 'SELECT u.usename AS "Role name",
CASE WHEN u.usesuper AND u.usecreatedb THEN CAST('superuser, create
database' AS pg_catalog.text)
WHEN u.usesuper THEN CAST('superuser' AS pg_catalog.text)
WHEN u.usecreatedb THEN CAST('create database' AS
pg_catalog.text)
ELSE CAST('' AS pg_catalog.text)
END AS "Attributes"
FROM pg_catalog.pg_user u
ORDER BY 1;'))
View(dbGetQuery(conn, "WITH RECURSIVE cte AS (
SELECT oid FROM pg_roles WHERE rolname = 'maxwell'
UNION ALL
SELECT m.roleid
FROM   cte
JOIN   pg_auth_members m ON m.member = cte.oid
)
SELECT oid FROM cte;"))
View(dbGetQuery(conn, "WITH RECURSIVE cte AS (
SELECT oid FROM pg_roles
UNION ALL
SELECT m.roleid
FROM   cte
JOIN   pg_auth_members m ON m.member = cte.oid
)
SELECT oid FROM cte;"))
View(dbGetQuery(conn, "SELECT grantee, privilege_type
FROM information_schema.role_table_grants "))
View(dbGetQuery(conn, "SELECT * from pg_roles"))
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
conn <- dbConnect(Postgres(),
user = "rvino",
password = "tbefvd8kj5kb58z5",
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, 'select * from mls.players'))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
dbSendQuery(conn, 'grant usage on schema mls to basic_access')
dbSendQuery(conn, 'grant usage on schema nwsl to basic_access')
dbSendQuery(conn, 'grant basic_access to rvino')
dbSendQuery(conn, 'grant basic_access to mattyanselmo')
conn <- dbConnect(Postgres(),
user = "rvino",
password = "tbefvd8kj5kb58z5",
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, 'select * from mls.players'))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "SELECT *
FROM information_schema.role_table_grants "))
conn <- dbConnect(Postgres(),
user = "rvino",
password = "tbefvd8kj5kb58z5",
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, 'select * from nwsl.players'))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
dbSendQuery(conn, 'grant select on schema nwsl to basic_access')
dbSendQuery(conn, 'grant select on nwsl.players to basic_access')
dbSendQuery(conn, 'grant select on all tables in schema nwsl to basic_access')
dbSendQuery(conn, 'grant select on all tables in schema mls to basic_access')
conn <- dbConnect(Postgres(),
user = "rvino",
password = "tbefvd8kj5kb58z5",
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, 'select * from nwsl.players'))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
dbSendQuery(conn, 'grant basic_access to mattyanselmo')
dbSendQuery(conn, 'grant basic_access to rvino')
View(dbGetQuery(conn, "SELECT distinct table_schema, table_name FROM information_schema.role_table_grants order by table_schema, table_name"))
conn <- dbConnect(Postgres(),
user = getOption("asa_user"),
password = getOption("asa_password"),
host = getOption("asa_host"),
port = 25060,
dbname = getOption("asa_db_name"),
sslmode = "require")
View(dbGetQuery(conn, "select * from mls.salaries"))
guido <- data.frame(player_id = 123051, mlspa_release = as.Date('2019-06-01'), base_salary = 120000, guaranteed_compensation = 120000)
View(guido)
?dbAppendTable
dbAppendTable(conn, DBI::SQL("mls.salaries"), guido)
View(dbGetQuery(conn, "select * from mls.salaries where player_id = 123051"))
hundley <- data.frame(player_id = 383157, mlspa_release = as.Date('2019-06-01'), base_salary = 65000, guaranteed_compensation = 98000)
View(dbGetQuery(conn, 'select * from mls.players'))
dbSendQuery(conn, "update table mls.players set player_name = 'Matt Hundley', birth_date = '2000-05-11', home_town = 'Littleton, CO' where player_id = 383157")
dbSendQuery(conn, "update mls.players set player_name = 'Matt Hundley', birth_date = '2000-05-11', home_town = 'Littleton, CO' where player_id = 383157")
View(dbGetQuery(conn, 'select * from mls.players'))
dbSendQuery(conn, "update mls.players set player_name = 'Matt Hundley', birth_date = '2000-05-11', home_town = 'Littleton, CO', headshot_url = 'https://league-mp7static.mlsdigital.net/styles/image_player_headshot/s3/Fallback-Headshot-140x200_39.png' where player_id = 383157")
View(dbGetQuery(conn, 'select * from mls.players'))
dbSendQuery(conn, "update mls.players set player_name = 'Nick Hinds', birth_date = '1997-10-19', home_town = 'Plantation, FL', headshot_url = 'https://league-mp7static.mlsdigital.net/styles/image_player_headshot/s3/Fallback-Headshot-140x200_39.png' where player_id = 383159")
dbSendQuery(conn, "update mls.players set birth_date = '1998-12-01', home_town = 'Kapolei, HI', headshot_url = 'https://league-mp7static.mlsdigital.net/styles/image_player_headshot/s3/Fallback-Headshot-140x200_39.png' where player_id = 383158")
View(dbGetQuery(conn, 'select * from mls.players'))
dbSendQuery(conn, "update mls.players set height_ft = 5, height_in = 7, weight_lb = 135 where player_id = 383160")
View(dbGetQuery(conn, 'select * from mls.players'))
